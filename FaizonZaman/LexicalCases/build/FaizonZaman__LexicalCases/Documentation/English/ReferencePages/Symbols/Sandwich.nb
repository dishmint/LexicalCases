(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    110568,       2343]
NotebookOptionsPosition[    103960,       2209]
NotebookOutlinePosition[    106401,       2269]
CellTagsIndexPosition[    106314,       2264]
WindowTitle->Sandwich
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {GridBox[{
      {
       ItemBox[Cell[BoxData[
         RowBox[{
          TemplateBox[{12},
           "Spacer1"], Cell[
          "FAIZON ZAMAN/ LEXICAL CASES SYMBOL", "PacletNameCell",
           TextAlignment->Center,ExpressionUUID->
           "e9f7ef5b-3402-42a7-bcc8-b546f09e26f3"], 
          TemplateBox[{8},
           "Spacer1"]}]],
         TextAlignment->Center,ExpressionUUID->
         "59ea43d1-85c2-494e-ad96-d4636579501e"],
        Background->RGBColor[0.490196, 0.576471, 0.690196],
        ItemSize->Full], ""}
     },
     GridBoxAlignment->{"Rows" -> {{Center}}},
     GridBoxItemSize->{"Columns" -> {Full, 
         Scaled[0.02]}, "Rows" -> {{2.5}}}], Cell[TextData[{
     Cell[BoxData[
      TagBox[
       ActionMenuBox[
        FrameBox[Cell[TextData[{
          "See Also",
          " ",
          Cell[BoxData[
           GraphicsBox[
            {GrayLevel[0.66667], Thickness[0.13], 
             LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]},
            AspectRatio->1,
            ImageSize->20,
            PlotRange->{{-3, 4}, {-1, 1}}]],ExpressionUUID->
           "0ea15f11-202e-4e60-8396-a2e017b9203d"]
         }],ExpressionUUID->"134c7558-71c2-4073-b378-05b9f340abdb"],
         StripOnInput->False], {"\<\"WordBoundary\"\>":>
        Documentation`HelpLookup[
        "paclet:ref/WordBoundary"], "\<\"StartOfString\"\>":>
        Documentation`HelpLookup[
        "paclet:ref/StartOfString"], "\<\"EndOfString\"\>":>
        Documentation`HelpLookup["paclet:ref/EndOfString"], Delimiter, 
        StyleBox["\<\"Functions\"\>", "SeeAlsoSection",
         StripOnInput->False,
         FontSize->14,
         FontSlant->"Italic"]:>NotebookFind[
         EvaluationNotebook[], "SeeAlsoSection", All, CellStyle], 
        StyleBox["\<\"LexicalCases\"\>", "SeeAlsoRelated",
         StripOnInput->False]:>Documentation`HelpLookup[
        "paclet:FaizonZaman/LexicalCases/ref/LexicalCases"]},
        Appearance->None,
        MenuAppearance->Automatic,
        MenuStyle->"SeeAlso"],
       MouseAppearanceTag["LinkHand"]]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "5e307ce2-30ca-453d-934f-ed236b064980"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      TagBox[
       ActionMenuBox[
        FrameBox[Cell[TextData[{
          "Related Guides",
          " ",
          Cell[BoxData[
           GraphicsBox[
            {GrayLevel[0.66667], Thickness[0.13], 
             LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]},
            AspectRatio->1,
            ImageSize->20,
            PlotRange->{{-3, 4}, {-1, 1}}]],ExpressionUUID->
           "20364364-2886-4c0c-b754-fc7090f9683b"]
         }],ExpressionUUID->"812e39d7-d664-4a98-9afa-3d7499bd68cd"],
         StripOnInput->False], {"\<\"LexicalCases\"\>":>
        Documentation`HelpLookup[
        "paclet:FaizonZaman/LexicalCases/guide/LexicalCases"]},
        Appearance->None,
        MenuAppearance->Automatic,
        MenuStyle->"MoreAbout"],
       MouseAppearanceTag["LinkHand"]]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "920834e6-9b58-4c77-a883-0be7f9e6f0bf"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      TagBox[
       ActionMenuBox[
        FrameBox[Cell[TextData[{
          "Tech Notes",
          " ",
          Cell[BoxData[
           GraphicsBox[
            {GrayLevel[0.66667], Thickness[0.13], 
             LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]},
            AspectRatio->1,
            ImageSize->20,
            PlotRange->{{-3, 4}, {-1, 1}}]],ExpressionUUID->
           "26fba2e8-6a5a-4ac9-93c9-6fa72e106ecd"]
         }],ExpressionUUID->"5cc92dd5-f3df-485b-9451-00332b8edea8"],
         StripOnInput->False], {"\<\"LexicalCases Overview\"\>":>
        Documentation`HelpLookup[
        "paclet:FaizonZaman/LexicalCases/tutorial/LexicalCasesOverview"]},
        Appearance->None,
        MenuAppearance->Automatic,
        MenuStyle->"Tutorials"],
       MouseAppearanceTag["LinkHand"]]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "b5e27ce0-82fb-4704-8be1-b57212eb8874"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      TagBox[
       ActionMenuBox[
        FrameBox[Cell[TextData[{
          "URL",
          " ",
          Cell[BoxData[
           GraphicsBox[
            {GrayLevel[0.66667], Thickness[0.13], 
             LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]},
            AspectRatio->1,
            ImageSize->20,
            PlotRange->{{-3, 4}, {-1, 1}}]],ExpressionUUID->
           "28960854-06bf-4bbf-9fff-fc3353136884"]
         }],ExpressionUUID->"788317ef-e504-4529-9776-3db128ccb3c8"],
         StripOnInput->
          False], {"\<\"FaizonZaman/LexicalCases/ref/Sandwich\"\>":>
        None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
        Module[{DocumentationSearch`Private`nb$}, 
         DocumentationSearch`Private`nb$ = NotebookPut[
            Notebook[{
              Cell["FaizonZaman/LexicalCases/ref/Sandwich"]}, Visible -> 
             False]]; SelectionMove[
          DocumentationSearch`Private`nb$, All, Notebook]; 
         FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
         NotebookClose[DocumentationSearch`Private`nb$]; Null], 
        Delimiter, "\<\"Copy web URL\"\>":>
        Module[{DocumentationSearch`Private`nb$}, 
         DocumentationSearch`Private`nb$ = NotebookPut[
            Notebook[{
              Cell[
               BoxData[
                MakeBoxes[
                 Hyperlink[
                 "http://reference.wolfram.com/language/FaizonZaman/\
LexicalCases/ref/Sandwich.html"], StandardForm]], "Input", TextClipboardType -> 
               "PlainText"]}, Visible -> False]]; 
         SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
         FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
         NotebookClose[DocumentationSearch`Private`nb$]; 
         Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
          NotebookLocate[{
            URL[If[
               TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$116886], 
               "http://reference.wolfram.com/system-modeler/", 
               "http://reference.wolfram.com/language/"] <> 
             "FaizonZaman/LexicalCases/ref/Sandwich" <> ".html"], None}]}]},
        Appearance->None,
        MenuAppearance->Automatic,
        MenuStyle->"URLMenu"],
       MouseAppearanceTag["LinkHand"]]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "589f68b4-dd55-45f5-a600-e981376c1f79"]
    }], "AnchorBar",
     CacheGraphics->False,ExpressionUUID->
     "1c09b155-f3cf-4400-adb8-232d8a2d26ab"]}
  }]], "AnchorBarGrid",
 CellID->1,ExpressionUUID->"5a7b29e5-0477-4a0f-a46d-21f070616e45"],

Cell["FaizonZaman`LexicalCases`", "ContextNameCell",ExpressionUUID->"aa77733f-40ac-4230-902b-48286ceb2fe0"],

Cell[CellGroupData[{

Cell[BoxData[GridBox[{
   {Cell[TextData[{
     Cell[
     "Sandwich", "ObjectName",ExpressionUUID->
      "aff16554-74e6-4e57-b273-61725b96ed5b"],
     Cell[BoxData[
      TemplateBox[{8},
       "Spacer1"]],ExpressionUUID->"84644982-1dba-4118-9b2e-68570cb65007"],
     Cell[BoxData[
     ""], "ObjectNameTranslation",ExpressionUUID->
      "b3331c17-e573-4baf-9596-340a077f24c9"]
    }],ExpressionUUID->"70253dd4-070c-45ad-bb8d-3c8a23157563"], 
    "\[SpanFromLeft]"}
  }]], "ObjectNameGrid",ExpressionUUID->"f209e911-4281-4e48-aa16-\
69201b31d66b"],

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{
         Cell[
          TextData["Sandwich"]], 
         "paclet:FaizonZaman/LexicalCases/ref/Sandwich", 
         "FaizonZaman Package Symbol"},
        "PackageLink",
        BaseStyle->"InlineFormula"], "[", 
       RowBox[{
        StyleBox["outer", "TI"], ",", 
        StyleBox["inner", "TI"]}], "]"}]], "InlineFormula",
      FontFamily->"Source Sans Pro",ExpressionUUID->
      "141ad583-4d43-4ef1-b5a6-4c5ce3fd9f5d"],
     "\[LineSeparator]sandwiches lexical pattern ",
     Cell[BoxData[
      StyleBox["inner", "TI"]], "InlineFormula",
      FontFamily->"Source Sans Pro",ExpressionUUID->
      "9e1826fd-3331-4a88-a692-18237414b924"],
     " between two instances of lexical pattern ",
     Cell[BoxData[
      StyleBox["outer", "TI"]], "InlineFormula",
      FontFamily->"Source Sans Pro",ExpressionUUID->
      "e439591a-148c-475c-8200-f3f3a4833213"]
    }],ExpressionUUID->"13d0187f-42d5-4000-b8ff-b7aeab4bdca9"]},
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{
         Cell[
          TextData["Sandwich"]], 
         "paclet:FaizonZaman/LexicalCases/ref/Sandwich", 
         "FaizonZaman Package Symbol"},
        "PackageLink",
        BaseStyle->"InlineFormula"], "[", 
       StyleBox["outer", "TI"], "]"}]], "InlineFormula",
      FontFamily->"Source Sans Pro",ExpressionUUID->
      "c8843a72-b62f-486f-8235-4f682b5ab960"],
     "\[LineSeparator]Represents an operator form that can be applied to an \
expression"
    }],ExpressionUUID->"d344a13a-0e00-4937-8e24-c0e94c533278"]}
  }]], "Usage",
 CellID->882729196,ExpressionUUID->"c402ace1-2174-42db-968f-4fb483386163"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 ButtonBox[Cell[TextData[{
   Cell[BoxData[
    DynamicBox[ToBoxes[
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], {TaggingRules, "Openers", "NotesSection"}, 
         Closed], 
        Alternatives[Open, True]], 
       Style[
        Graphics[{
          Thickness[0.18], 
          RGBColor[0.8509803921568627, 0.396078431372549, 0], 
          Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
         PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
        0.68 Inherited], 
       Rotate[
        Style[
         Graphics[{
           Thickness[0.18], 
           RGBColor[0.8509803921568627, 0.396078431372549, 0], 
           Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
          PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
         0.68 Inherited], Rational[1, 2] Pi, {-1.65, -1}]]],
     ImageSizeCache->{14., {0.45000000000000107`, 13.549999999999999`}}]],
    ExpressionUUID->"b00e2f65-39eb-4f8f-b57a-7b9ce1eb4e91"],
   Cell[BoxData[
    TemplateBox[{1},
     "Spacer1"]],ExpressionUUID->"b5295f40-9be1-418b-ac9c-115bcd568341"],
   "Details and Options"
  }], "NotesFrameText",ExpressionUUID->"d7fefeaf-66f0-4b56-ba4b-c1f1b71b6647"],
  Appearance->{Automatic, None, "Normal", Automatic},
  BaseStyle->None,
  ButtonFunction:>(FrontEndExecute[{
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], All, ButtonCell], 
     FrontEndToken["OpenCloseGroup"], 
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], After, CellContents]}]& ),
  Evaluator->None,
  Method->
   "Preemptive"]],ExpressionUUID->"daffcdf9-8b3e-4028-acc9-94fd0b38f80a"]], \
"NotesSection",
 WholeCellGroupOpener->True,
 CellGroupingRules->{"SectionGrouping", 50},
 CacheGraphics->False,
 CellID->697979015,ExpressionUUID->"0f4e7b43-f330-4e95-9324-993b58b776ba"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Sandwich"]], "paclet:FaizonZaman/LexicalCases/ref/Sandwich", 
    "FaizonZaman Package Symbol"},
   "PackageLink",
   BaseStyle->"InlineFormula"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "26cf2b41-542f-4b45-8a5f-8361bb242684"],
 " returns a ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["StringExpression"]], "paclet:ref/StringExpression"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "aa892b8b-f940-49ef-8dbe-82c6e200a132"],
 ", unlike other patterns in this package (",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["WordToken"]], "paclet:FaizonZaman/LexicalCases/ref/WordToken", 
    "FaizonZaman Package Symbol"},
   "PackageLink",
   BaseStyle->"InlineFormula"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "3a184e7a-4a7a-4f7d-bb34-805f26595748"],
 ", ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["BoundToken"]], 
    "paclet:FaizonZaman/LexicalCases/ref/BoundToken", 
    "FaizonZaman Package Symbol"},
   "PackageLink",
   BaseStyle->"InlineFormula"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "5cbdfd55-ffa9-4656-a8fb-e258e757aeaa"],
 ", ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["OptionalToken"]], 
    "paclet:FaizonZaman/LexicalCases/ref/OptionalToken", 
    "FaizonZaman Package Symbol"},
   "PackageLink",
   BaseStyle->"InlineFormula"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "aac951cb-d55b-4f0f-a8c8-56a331914018"],
 " etc. which are inert)"
}], "Notes",
 CellID->1756933914,ExpressionUUID->"afdc3b19-9487-43c9-9a65-76c68cbc5cd4"]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "NotesSection"}, Closed]]]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  DynamicBox[ToBoxes[
    If[
     MatchQ[
      CurrentValue[
       EvaluationNotebook[], {
       TaggingRules, "Openers", "PrimaryExamplesSection"}, Open], 
      Alternatives[True, Open]], 
     Style[
      Graphics[{
        Thickness[0.18], 
        RGBColor[0.8509803921568627, 0.396078431372549, 0], 
        Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
       PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
      0.68 Inherited], 
     Rotate[
      Style[
       Graphics[{
         Thickness[0.18], 
         RGBColor[0.8509803921568627, 0.396078431372549, 0], 
         Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
        PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
       0.68 Inherited], Rational[1, 2] Pi, {-1.65, -1}]]],
   ImageSizeCache->{14., {5., 9.}}]],ExpressionUUID->
  "8f40ddec-8dac-4c7f-9d27-fbfa49237f69"],
 Cell[BoxData[
  TemplateBox[{1},
   "Spacer1"]],ExpressionUUID->"67f3f4d6-faf2-4f71-8541-dee02bf12957"],
 "Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(2)", "ExampleCount",ExpressionUUID->
  "ebfcab66-a44f-4b0a-9c56-8eb35206690d"]
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CacheGraphics->False,
 CellTags->"PrimaryExamplesSection",
 CellID->1377625191,ExpressionUUID->"db1df526-e46e-4844-97ed-105e7c1c57c4"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  DynamicBox[ToBoxes[
    If[
     MatchQ[
      CurrentValue[
       EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "0"},
        Closed], 
      Alternatives[Open, True]], 
     Style[
      Graphics[{
        Thickness[0.18], 
        RGBColor[0.8509803921568627, 0.396078431372549, 0], 
        Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
       PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
      0.68 Inherited], 
     Rotate[
      Style[
       Graphics[{
         Thickness[0.18], 
         RGBColor[0.8509803921568627, 0.396078431372549, 0], 
         Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
        PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
       0.68 Inherited], Rational[1, 2] Pi, {-1.65, -1}]]],
   ImageSizeCache->{14., {5., 9.}}]],ExpressionUUID->
  "5b38f0f3-7737-412c-8c72-6906c62bc974"],
 Cell[BoxData[
  TemplateBox[{1},
   "Spacer1"]],ExpressionUUID->"d014cd5b-8c65-4223-8884-644c1aca579d"],
 "Basic Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount",ExpressionUUID->
  "a49b2d48-d435-400f-8e42-bd8c4cda44eb"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CacheGraphics->False,
 CellID->1725386830,ExpressionUUID->"506e83c8-8703-4d57-911f-6a5a2219ed5a"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Sandwich"]], "paclet:FaizonZaman/LexicalCases/ref/Sandwich", 
    "FaizonZaman Package Symbol"},
   "PackageLink",
   BaseStyle->"InlineFormula"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "6d2d3189-a5a4-4730-9db2-cc7778f1fb7a"],
 " \"car\" with a ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["WordToken"]], "paclet:FaizonZaman/LexicalCases/ref/WordToken", 
    "FaizonZaman Package Symbol"},
   "PackageLink",
   BaseStyle->"InlineFormula"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "647aa0c2-8679-4062-9719-0df4c72532cf"],
 " pattern"
}], "ExampleText",
 CellID->1881708440,ExpressionUUID->"7a4f9025-54aa-4ce8-b89d-09655a69e3f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lexpatt", "=", 
  RowBox[{"Sandwich", "[", 
   RowBox[{
    RowBox[{"WordToken", "[", "1", "]"}], ",", " ", 
    RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}]}], "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->632206651,ExpressionUUID->"4f1827a3-4f72-4da3-98f1-5f83c542c77a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WordToken", "[", "1", "]"}], "~~", 
  RowBox[{"BoundToken", "[", "\<\"car\"\>", "]"}], "~~", 
  RowBox[{"WordToken", "[", "1", "]"}]}]], "Output",
 CellLabel->"Out[1]=",
 CellID->1309418731,ExpressionUUID->"70a90d36-26e9-4c1b-b0bf-c718f842f838"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sndwchCases", "=", 
  RowBox[{"LexicalCases", "[", 
   RowBox[{
    RowBox[{"\"\<Content\>\"", "->", "\"\<cars\>\""}], ",", "lexpatt"}], 
   "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->569953902,ExpressionUUID->"b3343717-ffb8-4aa4-b16a-46666dd14ceb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["LexicalSummary", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Source: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wikipedia\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Articles: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["35", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Matches: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["633", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Source: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wikipedia\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Articles: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["35", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Matches: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["633", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[
             FaizonZaman`LexicalCases`LexicalSummary, 1263440, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", FaizonZaman`LexicalCases`LexicalSummary, 1263440, 
            7886052071833066553608442275410639807813506456628220526096, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "LexicalSummary[<|Data -> {<|Article -> Car, Match -> A car or, Position \
-> {{1, 8}}|>, <|Article -> Car, Match -> American car manufactured, Position \
-> {{455, 479}}|>, <|Article -> Car, Match -> The car is, Position -> {{705, \
714}}|>, <<539>>, <|Article -> The Cars (album), <<2>>|>, <|Article -> Cars \
(video game), Match -> Missing[NoMatches], Position -> {}|>}, <<5>>|>]"& )],
  False,
  BoxID -> 7886052071833066553608442275410639807813506456628220526096,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[2]=",
 CellID->1033627737,ExpressionUUID->"cb7f1296-d102-4aaa-a2df-15b1696277d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sndwchCases", "[", "\"\<CountGroups\>\"", "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->609527042,ExpressionUUID->"6787ab00-e88e-4c13-a57f-19ee5a20c3af"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Matches" -> {"stock car racing"}, "CountGroup" -> 19|>, <|
       "Matches" -> {"the car is", "Stock car racing", "electric car to"}, 
        "CountGroup" -> 9|>, <|
       "Matches" -> {"The car was", "electric car in"}, "CountGroup" -> 8|>, <|
       "Matches" -> {"the car was", "the car and"}, "CountGroup" -> 7|>, <|
       "Matches" -> {
         "sports car was", "sports car racing", "police car used", 
          "luxury car is", "European car classification"}, "CountGroup" -> 
        6|>, <|"Matches" -> {"the car as", "of car manufacturers"}, 
        "CountGroup" -> 5|>, <|
       "Matches" -> {"the car to", "sports car market", "a car with"}, 
        "CountGroup" -> 4|>, <|
       "Matches" -> {
         "used car lot", "tuner car and", "The car is", "race car with", 
          "premium car larger", "new car sales", "luxury car brands", 
          "first car in", "electric car worldwide", "electric car for", 
          "a car that", "a car in", "a car and"}, "CountGroup" -> 3|>, <|
       "Matches" -> {
         "Touring car racing", "touring car racing", 
          "touring car championships", "touring car and", "the car when", 
          "the car that", "the car on", "the car design", 
          "the car characters", "the car at", "the car are", 
          "stock car series", "sports car since", "sports car races", 
          "sports car of", "sports car manufacturer", "sports car is", 
          "sports car called", "sports car based", "sports car and", 
          "racing car was", "race car who", "race car driver", 
          "police car to", "police car that", "police car is", 
          "other car manufacturers", "of car use", "of car buyers", 
          "luxury car sales", "luxury car manufacturers", "into car world", 
          "Indy car team", "family car or", "executive car or", 
          "electric car living", "electric car is", "electric car at", 
          "bumper car floor", "and car paint"}, "CountGroup" -> 2|>, <|
       "Matches" -> {
         "young car who", "word car is", "with car horns", "whole car could", 
          "wheeled car was", "wheel car is", "wealthy car owners", 
          "war car was", "Volvo car left", "V8 car in", "used car salesman", 
          "unmarked car is", "unmarked car and", "ultimate car of", 
          "tuner car who", "transitCable car may", "touring car lap", 
          "total car sales", "top car builder", "to car use", 
          "to car production", "through car share", "This car model", 
          "this car in", "This car has", "then car buyers", "their car to", 
          "their car models", "their car forms", "their car as", 
          "the car yet", "the car writes", "the car would", "the car with", 
          "the car were", "The car went", "the car weighed", 
          "the car visible", "the car upwards", "the car upon", 
          "the car through", "the car stable", "the car slowed", 
          "the car since", "The car returned", "the car raced", 
          "the car passed", "the car onto", "The car of", "the car models", 
          "the car missed", "the car market", "the car maker", 
          "the car looked", "the car instead", "The car industry", 
          "the car if", "the car have", "The car has", "The car had", 
          "the car had", "the car from", "the car feels", "the car evolved", 
          "the car equally", "the car doors", "the car crashes", 
          "the car competitive", "the car but", "the car brand", 
          "the car body", "The car became", "the car around", 
          "the car allowed", "that car use", "that car rental", 
          "Tesla car inspected", "surveillance car is", 
          "supertouring car were", "subcompact car market", 
          "Subcompact car is", "subcompact car is", "subcompact car for", 
          "styled car with", "stroke car engine", "Stock car races", 
          "stock car races", "stock car governing", "stock car formula", 
          "stock car drivers", "stock car divisions", 
          "stock car competitions", "stock car came", "stock car and", 
          "steel car bodies", "States car industry", "sprint car tyres", 
          "sports car world", "sports car with", "sports car which", 
          "sports car to", "sports car that", "Sports car racing", 
          "sports car production", "Sports car ownership", 
          "sports car models", "sports car manufacturers", 
          "sports car manufacture", "sports car driver", 
          "sports car designed", "sports car concept", "sports car company", 
          "sports car aimed", "Some car hacking", "smaller car was", 
          "smaller car in", "small car segment", "small car lineups", 
          "slower car getting", "size car or", "size car as", 
          "single car was", "significant car from", 
          "Several car classification", "seater car in", "seat car without", 
          "s car going", "s car for", "s car factories", "s car during", 
          "saloon car which", "saloon car available", "road car not", 
          "regarding car contact", "rear car tends", "rally car of", 
          "rally car during", "racing car that", "racing car in", 
          "racing car for", "racing car being", "race car the", 
          "race car series", "race car rules", "race car or", 
          "race car number", "race car Lightning", "race car Francesco", 
          "race car drivers", "race car developer", "race car described", 
          "race car built", "race car are", "race car and", 
          "race car aerodynamics", "production car world", 
          "production car top", "production car to", "production car race", 
          "production car in", "production car 0", "private car ownership", 
          "powered car in", "Pony car is", "pony car class", "police car was",
           "police car tasked", "police car plays", "police car partially", 
          "police car modified", "police car might", "police car lights", 
          "police car has", "police car exist", "police car and", 
          "physical car form", "permanent car manufacturing", 
          "performance car was", "pedestrian car casualties", 
          "patrol car used", "patrol car is", "patrol car allows", 
          "passenger car with", "passenger car or", "passenger car only", 
          "passenger car models", "passenger car model", 
          "passenger car market", "passenger car manufacturer", 
          "passenger car division", "passenger car classification", 
          "overall car industry", "Our car characters", 
          "other car propulsion", "other car manufacturer", "or car setup", 
          "or car in", "only car maker", "one car for", "One car driven", 
          "on car control", "oldest car racing", "of car was", "of car usage",
           "of car technology", "of car production", "of car may", 
          "of car it", "of car colors", "of car carriers", "of car body", 
          "no car can", "new car was", "new car to", "new car tax", 
          "new car market", "new car factory", "new car and", 
          "Neither car reached", "Muscle car is", 
          "multinational car manufacturer", "motor car in", 
          "modern car rallies", "model car vary", "MG car production", 
          "many car rental", "Malaysian car company", "luxury car trim", 
          "luxury car tax", "luxury car phenomenon", "luxury car marque", 
          "luxury car market", "luxury car in", "luxury car emerged", 
          "Luxury car companies", "luxury car buyers", "Lotus car models", 
          "Lotus car manufacturing", "Lotus car fan", "LMP2 car in", 
          "like car sharing", "last car which", "last car built", 
          "largest car company", "large car by", "lapped car of", 
          "kit car industry", "kit car era", "kei car with", "Jaguar car to", 
          "its car naming", "is car service", "intermediate car manufactures",
           "influenced car design", "Indy car project", "Indy car designed", 
          "individual car body", "independent car makers", "in car sales", 
          "imported car bodies", "ICE car fires", "hybrid car based", 
          "Hope car to", "Historic car models", "his car land", "his car in", 
          "his car broke", "GT car racing", "government car size", 
          "Gear car of", "fuel car can", "front car tends", "from car radios",
           "four car models", "for car safety", "first car that", 
          "first car model", "first car from", "family car is", 
          "family car in", "factory car including", "factory car in", 
          "executive car launched", "Executive car is", "executive car is", 
          "executive car introduced", "everyday car to", 
          "Emerging car technologies", "electric car would", 
          "electric car works", "electric car within", "electric car will", 
          "electric car stock", "electric car some", "electric car purchase", 
          "electric car market", "electric car manufacturer", 
          "electric car instead", "electric car has", "electric car fleet", 
          "electric car depends", "electric car can", "electric car and", 
          "each car moves", "each car makes", "each car had", "drive car to", 
          "drive car that", "dominant car and", "documented car fatalities", 
          "DMG car was", "diesel car when", "development car tested", 
          "developed car classification", "Derby car made", "decoy car is", 
          "cunning car salesman", "continued car production", 
          "connected car systems", "concept car with", "concept car was", 
          "concept car for", "concept car at", "competitive car in", 
          "competition car production", "compact car was", 
          "compact car platforms", "compact car or", "Compact car is", 
          "compact car is", "compact car in", "city car concept", 
          "city car category", "Chinese car Roewe", "Chinese car buyers", 
          "catch car thieves", "Cable car most", "by car resulting", 
          "by car enthusiasts", "business car and", "bumper car setup", 
          "bumper car riders", "built car designed", "British car production",
           "blue car who", "between car and", "better car of", 
          "best car achieving", "Benz car to", "as car racing", 
          "as car manufacturers", "any car model", "any car entered", 
          "animating car characters", "and car production", 
          "and car manufacturers", "and car had", "and car enthusiast", 
          "and car body", "American car with", "American car was", 
          "American car manufactured", "American car makers", 
          "American car company", "American car classification", 
          "all car classes", "a car which", "a car used", "a car tire", 
          "A car or", "a car on", "a car may", "a car manufacturer", 
          "A car is", "a car influences", "a car from", "a car especially", 
          "a car designed", "a car crash", "A car considered", 
          "a car classification", "a car cheaper", "a car called", 
          "a car built", "a car as", "36 car pack"}, "CountGroup" -> 1|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Matches"} -> 
        1, {All, "CountGroup"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Matches" -> TypeSystem`PackageScope`UnknownShape[False], 
            "CountGroup" -> TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 2, {All}]], 10, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Matches", "CountGroup"}, {
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength], 
         TypeSystem`Atom[Integer]}], 10], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Matches"} -> 
        1, {All, "CountGroup"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Matches" -> TypeSystem`PackageScope`UnknownShape[False], 
            "CountGroup" -> TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 2, {All}]], 10, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Matches", "CountGroup"}, {
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength], 
         TypeSystem`Atom[Integer]}], 10], "Path" -> {}, "DisplayedRowCount" -> 
     10, "DisplayedColumnCount" -> 2, "DataRowCount" -> 10, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Matches", 
                  Style[
                  "Matches", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Matches"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Matches"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CountGroup", 
                  Style[
                  "CountGroup", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "CountGroup"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "CountGroup"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"stock car racing"}, ShowStringCharacters -> False], 
                  
                  Style[
                   Style[{"stock car racing"}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car is", "Stock car racing", "electric car to"},
                    ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"the car is", "Stock car racing", 
                    "electric car to"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"The car was", "electric car in"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"The car was", "electric car in"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car was", "the car and"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"the car was", "the car and"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"sports car was", "sports car racing", 
                    "police car used", "luxury car is", 
                    "European car classification"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"sports car was", "sports car racing", 
                    "police car used", "luxury car is", 
                    "European car classification"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car as", "of car manufacturers"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"the car as", "of car manufacturers"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car to", "sports car market", "a car with"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"the car to", "sports car market", "a car with"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 13], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 13], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 40], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 40], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 386], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 386], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{10, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{619., {155.3544921875, 160.6455078125}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{619., {155.3544921875, 160.6455078125}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[3]=",
 CellID->1540027169,ExpressionUUID->"65d666d7-fe1c-492b-b7a7-0ffc6953140b"]
}, Open  ]]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "0"}, 
  Closed]]]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  DynamicBox[ToBoxes[
    If[
     MatchQ[
      CurrentValue[
       EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "2"},
        Closed], 
      Alternatives[Open, True]], 
     Style[
      Graphics[{
        Thickness[0.18], 
        RGBColor[0.8509803921568627, 0.396078431372549, 0], 
        Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
       PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
      0.68 Inherited], 
     Rotate[
      Style[
       Graphics[{
         Thickness[0.18], 
         RGBColor[0.8509803921568627, 0.396078431372549, 0], 
         Line[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
        PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], Magnification -> 
       0.68 Inherited], Rational[1, 2] Pi, {-1.65, -1}]]],
   ImageSizeCache->{14., {0.45000000000000107`, 13.549999999999999`}}]],
  ExpressionUUID->"fa4c4a11-74b7-4551-b386-ae7a47fde759"],
 Cell[BoxData[
  TemplateBox[{1},
   "Spacer1"]],ExpressionUUID->"bd48bd74-88d3-43b5-998e-f713b3050bc4"],
 "Possible Issues",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount",ExpressionUUID->
  "cc3f6ea1-5c75-43b9-87ed-7f1bb52679bd"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CacheGraphics->False,
 CellID->1233549862,ExpressionUUID->"6de1e26c-623b-4e7f-9f16-b34e4b5cb7c8"],

Cell[TextData[{
 "Naming the 'outer' pattern will not work since it will produce the same \
name for the left flanking pattern and right flanking pattern. Note the \
duplicate ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"w", ":"}], "Input"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "4da8548b-9f73-49f2-ae77-18318a015d46"],
 "."
}], "ExampleText",
 CellID->1504242725,ExpressionUUID->"019ff9e0-6933-4b45-9191-06dbe568b556"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpandPattern", "[", 
  RowBox[{"\"\<a nice car is good.\>\"", ",", 
   RowBox[{
    RowBox[{"Sandwich", "[", 
     RowBox[{
      RowBox[{"w", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}], ",", " ", 
      RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}]}], "]"}], ":>", "w"}]}],
   "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1870854804,ExpressionUUID->"669f3e6a-7b7a-425e-9e29-f3a3185c6da2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"w", ":", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "StartOfString", "|", 
       "StartOfLine"}], "~~", 
      RowBox[{"WordCharacter", ".."}], "~~", 
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "EndOfString", "|", 
       "EndOfLine"}]}], ")"}]}], "~~", 
   RowBox[{
   "WordBoundary", "|", "\<\" \"\>", "|", "StartOfString", "|", 
    "StartOfLine"}], "~~", "\<\"car\"\>", "~~", 
   RowBox[{
   "WordBoundary", "|", "\<\" \"\>", "|", "EndOfString", "|", "EndOfLine"}], "~~", 
   RowBox[{"w", ":", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "StartOfString", "|", 
       "StartOfLine"}], "~~", 
      RowBox[{"WordCharacter", ".."}], "~~", 
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "EndOfString", "|", 
       "EndOfLine"}]}], ")"}]}]}], "\[RuleDelayed]", "w"}]], "Output",
 CellLabel->"Out[1]=",
 CellID->292715916,ExpressionUUID->"6072789b-68ba-4f8d-9fd2-f3344b63f536"]
}, Open  ]],

Cell["LexicalCases fails with this pattern:", "ExampleText",
 CellID->2360343,ExpressionUUID->"0a192bed-8a9d-459e-8169-84feaf04af42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LexicalCases", "[", 
  RowBox[{"\"\<a nice car is good.\>\"", ",", 
   RowBox[{
    RowBox[{"Sandwich", "[", 
     RowBox[{
      RowBox[{"w", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}], ",", " ", 
      RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}]}], "]"}], ":>", "w"}]}],
   "]"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->187057416,ExpressionUUID->"08c176e6-996d-4e9c-b3a8-d93cc823cdae"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10., {0., 10.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"\\!\\(\\*TagBox[RowBox[{\\\"StringCases\\\", \\\"[\\\", \
RowBox[{\\\"FaizonZaman`LexicalCases`Private`s$14921\\\", \\\",\\\", \
\\\"FaizonZaman`LexicalCases`Private`rx$14921\\\", \\\",\\\", \
RowBox[{\\\"IgnoreCase\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \
\\\"[\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"IgnoreCase\\\"}], \\\"]\\\"}]}], \\\",\\\", \
RowBox[{\\\"Overlaps\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \\\"[\
\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"Overlaps\\\"}], \\\"]\\\"}]}]}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) produced a message on evaluation.\"", 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ConfirmationFailed\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10., {0., 10.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"\\!\\(\\*TagBox[RowBox[{\\\"StringCases\\\", \\\"[\\\", \
RowBox[{\\\"FaizonZaman`LexicalCases`Private`s$14921\\\", \\\",\\\", \
\\\"FaizonZaman`LexicalCases`Private`rx$14921\\\", \\\",\\\", \
RowBox[{\\\"IgnoreCase\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \
\\\"[\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"IgnoreCase\\\"}], \\\"]\\\"}]}], \\\",\\\", \
RowBox[{\\\"Overlaps\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \\\"[\
\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"Overlaps\\\"}], \\\"]\\\"}]}]}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) produced a message on evaluation.\"", 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ConfirmationFailed\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"ConfirmationType\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"ConfirmQuiet\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"HeldExpression\"", "\": \""}, "RowDefault"],
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"Hold", "[", 
                    RowBox[{"StringCases", "[", 
                    
                    RowBox[{
                    "FaizonZaman`LexicalCases`Private`s$14921", ",", 
                    "FaizonZaman`LexicalCases`Private`rx$14921", ",", 
                    RowBox[{"IgnoreCase", "\[Rule]", 
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"LexicalCases", ",", 
                    RowBox[{"{", "}"}], ",", "IgnoreCase"}], "]"}]}], ",", 
                    RowBox[{"Overlaps", "\[Rule]", 
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"LexicalCases", ",", 
                    RowBox[{"{", "}"}], ",", "Overlaps"}], "]"}]}]}], "]"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"HeldMessageName\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"Hold", "[", 
                    StyleBox[
                    RowBox[{"StringExpression", "::", "cond"}], 
                    "MessageName"], "]"}], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"HeldMessageCall\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"Hold", "[", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"StringExpression", "::", "cond"}], 
                    "MessageName"], ",", "w", ",", 
                    RowBox[{"w", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{"WordBoundary", "|", "\" \"", "|", 
                    "StartOfString", "|", "StartOfLine"}], "~~", 
                    RowBox[{"WordCharacter", ".."}], "~~", 
                    
                    RowBox[{"WordBoundary", "|", "\" \"", "|", "EndOfString", 
                    "|", "EndOfLine"}]}], ")"}]}]}], "]"}], "]"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Information\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                  "\"Message issued while calling StringCases\"", HoldForm], 
                  "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "ConfirmationFailed", <|
   "MessageTemplate" -> "`` produced a message on evaluation.", 
    "MessageParameters" -> {
      HoldForm[
       StringCases[
       FaizonZaman`LexicalCases`Private`s$14921, 
        FaizonZaman`LexicalCases`Private`rx$14921, IgnoreCase -> 
        OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, IgnoreCase], 
        Overlaps -> 
        OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, Overlaps]]]}, 
    "ConfirmationType" -> "ConfirmQuiet", "HeldExpression" -> Hold[
      StringCases[
      FaizonZaman`LexicalCases`Private`s$14921, 
       FaizonZaman`LexicalCases`Private`rx$14921, IgnoreCase -> 
       OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, IgnoreCase], 
       Overlaps -> 
       OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, Overlaps]]], 
    "HeldMessageName" -> Hold[
      MessageName[StringExpression, "cond"]], "HeldMessageCall" -> Hold[
      Message[
       MessageName[StringExpression, "cond"], $CellContext`w, 
       Pattern[$CellContext`w, 
        StringExpression[
         Alternatives[WordBoundary, " ", StartOfString, StartOfLine], 
         Repeated[WordCharacter], 
         Alternatives[WordBoundary, " ", EndOfString, EndOfLine]]]]], 
    "Information" -> "Message issued while calling StringCases"|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[2]=",
 CellID->892805826,ExpressionUUID->"46c21332-8abd-4ef9-968b-c626a088d650"]
}, Open  ]],

Cell["For now, explicitly name each pattern.", "ExampleText",
 CellID->518202502,ExpressionUUID->"f2965458-0542-4766-abf8-58369d06d81e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LexicalCases", "[", 
   RowBox[{"\"\<a nice car is good.\>\"", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"w1", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}], "~~", 
      RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}], "~~", 
      RowBox[{"w2", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}]}], ":>", 
     RowBox[{"w1", "<>", "w2"}]}]}], "]"}], "[", "\"\<Data\>\"", 
  "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->1364137182,ExpressionUUID->"32d98646-35d1-4229-8f4b-340f5e4bb0de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Match\"\>", "\[Rule]", "\<\"nice is\"\>"}], ",", 
    RowBox[{"\<\"Position\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"3", ",", "13"}], "}"}], "}"}]}]}], "\[RightAssociation]"}], 
  "}"}]], "Output",
 CellLabel->"Out[3]=",
 CellID->1325651071,ExpressionUUID->"99d18bd3-004d-4227-9e84-0d4d5d715312"]
}, Open  ]]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "2"}, 
  Closed]]]]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "PrimaryExamplesSection"}, 
  Closed]]]],

Cell[BoxData[GridBox[{
   {
    DynamicBox[FEPrivate`ImportImage[
      FrontEnd`FileName[{"Documentation", "FooterIcons"}, 
       "RelatedFunction.png"]],
     ImageSizeCache->{50., {27., 33.}}], GridBox[{
      {
       StyleBox[
        RowBox[{"See", " ", "Also"}], "SeeAlsoSection"]},
      {Cell[TextData[{
        Cell[BoxData[
         TemplateBox[{
           Cell[
            TextData["LexicalCases"]], 
           "paclet:FaizonZaman/LexicalCases/ref/LexicalCases", 
           "FaizonZaman Package Symbol"},
          "PackageLink",
          BaseStyle->"InlineFormula"]], "InlineFormula",
         FontFamily->"Source Sans Pro",ExpressionUUID->
         "2a53dba3-343b-447c-8601-2cb11158dbd5"],
        "\[NonBreakingSpace]",
        StyleBox[
        "\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
         "InlineSeparator"],
        " ",
        Cell[BoxData[
         TemplateBox[{
           Cell[
            TextData["WordBoundary"]], "paclet:ref/WordBoundary"},
          "RefLink",
          BaseStyle->{"InlineFormula"}]], "InlineFormula",
         FontFamily->"Source Sans Pro",ExpressionUUID->
         "09678941-d124-45a1-9dda-4dea66eea823"],
        "\[NonBreakingSpace]",
        StyleBox[
        "\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
         "InlineSeparator"],
        " ",
        Cell[BoxData[
         TemplateBox[{
           Cell[
            TextData["StartOfString"]], "paclet:ref/StartOfString"},
          "RefLink",
          BaseStyle->{"InlineFormula"}]], "InlineFormula",
         FontFamily->"Source Sans Pro",ExpressionUUID->
         "00a4c1f2-ff9a-4f95-a914-7d643760ffae"],
        "\[NonBreakingSpace]",
        StyleBox[
        "\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
         "InlineSeparator"],
        " ",
        Cell[BoxData[
         TemplateBox[{
           Cell[
            TextData["EndOfString"]], "paclet:ref/EndOfString"},
          "RefLink",
          BaseStyle->{"InlineFormula"}]], "InlineFormula",
         FontFamily->"Source Sans Pro",ExpressionUUID->
         "f8f54587-6afd-4512-8065-7652b92ccf84"]
       }], "SeeAlso",ExpressionUUID->"a46d408a-6df7-4623-92a9-84a53856b549"]}
     }]}
  }]], "SeeAlsoSection",ExpressionUUID->"762de68e-e4b2-488e-9335-\
64c7ea7a287c"],

Cell[BoxData[GridBox[{
   {
    DynamicBox[FEPrivate`ImportImage[
      FrontEnd`FileName[{"Documentation", "FooterIcons"}, 
       "RelatedTutorial.png"]],
     ImageSizeCache->{50., {27., 33.}}], GridBox[{
      {
       StyleBox[
        RowBox[{"Tech", " ", "Notes"}], "TutorialsSection"]},
      {
       RowBox[{"\[FilledVerySmallSquare]", Cell[BoxData[
         TemplateBox[{
           Cell[
            TextData["LexicalCases Overview"]], 
           "paclet:FaizonZaman/LexicalCases/tutorial/LexicalCasesOverview"},
          "RefLinkPlain",
          BaseStyle->{"Tutorials"}]], "Tutorials",ExpressionUUID->
         "2f8deee3-eba9-435e-8c73-e4ed454749cd"]}]}
     }]}
  }]], "TutorialsSection",ExpressionUUID->"41aa7404-fc9f-424e-ad66-\
48754e707d23"],

Cell[BoxData[GridBox[{
   {
    DynamicBox[FEPrivate`ImportImage[
      FrontEnd`FileName[{"Documentation", "FooterIcons"}, "RelatedGuide.png"]],
     ImageSizeCache->{50., {27., 33.}}], GridBox[{
      {
       StyleBox[
        RowBox[{"Related", " ", "Guides"}], "MoreAboutSection"]},
      {
       RowBox[{"\[FilledVerySmallSquare]", Cell[BoxData[
         TemplateBox[{
           Cell[
            TextData["LexicalCases"]], 
           "paclet:FaizonZaman/LexicalCases/guide/LexicalCases"},
          "RefLinkPlain",
          BaseStyle->{"MoreAbout"}]], "MoreAbout",ExpressionUUID->
         "e3b1859b-f407-4cfd-b491-cf8721215751"]}]}
     }]}
  }]], "MoreAboutSection",ExpressionUUID->"660bc2a3-a37d-4337-abac-\
fc166942e636"],

Cell[BoxData[GridBox[{
   {
    TemplateBox[{29},
     "Spacer1"], GridBox[{
      {
       RowBox[{
        TemplateBox[{17},
         "Spacer1"], 
        StyleBox[
         RowBox[{"Related", " ", "Links"}], "RelatedLinksSection"]}]},
      {Cell[TextData[Cell[BoxData[
        RowBox[{
         TemplateBox[{16},
          "Spacer1"], "\[FilledVerySmallSquare]", Cell[BoxData[
          TemplateBox[{
            Cell[
             TextData[
              Cell[
               TextData[{
                 Cell[
                  BoxData[
                   TemplateBox[{2}, "Spacer1"]]], 
                 "LexicalCases GitHub Repository"}]]]], 
            "https://github.com/dishmint/LexicalCases"},
           "WebLink",
           BaseStyle->{"RelatedLinks"}]],ExpressionUUID->
          "8d8374f2-07b8-4842-a393-e1dc2c3994f0"]}]],ExpressionUUID->
        "680972cc-f849-4748-801b-d79216cf54b9"]], "RelatedLinks",
        ExpressionUUID->"2dc2d392-8caf-4be1-bcf0-939883f93787"]}
     }]}
  }]], "RelatedLinksSection",ExpressionUUID->"6405ccd2-bf0a-4448-a91b-\
a00289c0eefe"],

Cell[" ", "FooterCell",ExpressionUUID->"c69462cb-ae66-42f9-afd8-0b12fee9376b"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{900, 830},
WindowMargins->{{171, Automatic}, {Automatic, 0}},
WindowTitle->"Sandwich",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "", "LinkTrails" -> "", 
  "HasOptions" -> True, "ExampleCounter" -> 1, 
  "Openers" -> {
   "PrimaryExamplesSection" -> Open, 
    "ExampleSection" -> {"0" -> Open, "2" -> Closed}, "NotesSection" -> 
    Closed}, "NewStyles" -> True, "CitationPopupData" -> $Failed, 
  "ShowCitation" -> False, "RootCaptions" -> "", 
  "Metadata" -> {
   "built" -> "{2022, 12, 12, 19, 28, 3.619348}", 
    "history" -> {"XX", "", "", ""}, "context" -> "FaizonZaman`LexicalCases`",
     "keywords" -> {
     "sandwich", "lexical sandwich", "surround", "lexical surroundings", 
      "lexical surround words"}, "specialkeywords" -> {}, 
    "tutorialcollectionlinks" -> {}, "index" -> True, "label" -> 
    "Faizon Zaman/ Lexical Cases Symbol", "language" -> "en", "paclet" -> 
    "FaizonZaman/LexicalCases", "status" -> "None", "summary" -> 
    "Sandwich[outer, inner] sandwiches lexical pattern inner between two \
instances of lexical pattern outer Sandwich[outer] Represents an operator \
form that can be applied to an expression", "synonyms" -> {}, 
    "tabletags" -> {}, "title" -> "Sandwich", "titlemodifier" -> "", 
    "windowtitle" -> "Sandwich", "type" -> "Symbol", "uri" -> 
    "FaizonZaman/LexicalCases/ref/Sandwich", "WorkflowDockedCell" -> ""}, 
  "SearchTextTranslated" -> ""},
CellContext->"Global`",
FrontEndVersion->"13.1 for Mac OS X ARM (64-bit) (June 16, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> "Global`"], 
   Cell[
    StyleData["Output"], CellContext -> "Global`"]}, Visible -> False, 
  FrontEndVersion -> "13.1 for Mac OS X ARM (64-bit) (June 16, 2022)", 
  StyleDefinitions -> "Default.nb"],
ExpressionUUID->"a4e3dba5-14fc-43b2-aa66-21ce87665820"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "PrimaryExamplesSection"->{
  Cell[13678, 366, 1390, 37, 36, "PrimaryExamplesSection",ExpressionUUID->"db1df526-e46e-4844-97ed-105e7c1c57c4",
   CellTags->"PrimaryExamplesSection",
   CellID->1377625191]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"PrimaryExamplesSection", 106113, 2257}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[580, 21, 6867, 166, 57, "AnchorBarGrid",ExpressionUUID->"5a7b29e5-0477-4a0f-a46d-21f070616e45",
 CellID->1],
Cell[7450, 189, 107, 0, 23, "ContextNameCell",ExpressionUUID->"aa77733f-40ac-4230-902b-48286ceb2fe0"],
Cell[CellGroupData[{
Cell[7582, 193, 551, 14, 60, "ObjectNameGrid",ExpressionUUID->"f209e911-4281-4e48-aa16-69201b31d66b"],
Cell[8136, 209, 1726, 44, 192, "Usage",ExpressionUUID->"c402ace1-2174-42db-968f-4fb483386163",
 CellID->882729196]
}, Open  ]],
Cell[CellGroupData[{
Cell[9899, 258, 1898, 47, 37, "NotesSection",ExpressionUUID->"0f4e7b43-f330-4e95-9324-993b58b776ba",
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->697979015],
Cell[11800, 307, 1751, 53, 70, "Notes",ExpressionUUID->"afdc3b19-9487-43c9-9a65-76c68cbc5cd4",
 CellID->1756933914]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "NotesSection"}, Closed]]]],
Cell[CellGroupData[{
Cell[13678, 366, 1390, 37, 36, "PrimaryExamplesSection",ExpressionUUID->"db1df526-e46e-4844-97ed-105e7c1c57c4",
 CellTags->"PrimaryExamplesSection",
 CellID->1377625191],
Cell[CellGroupData[{
Cell[15093, 407, 1368, 36, 31, "ExampleSection",ExpressionUUID->"506e83c8-8703-4d57-911f-6a5a2219ed5a",
 CellID->1725386830],
Cell[16464, 445, 771, 22, 40, "ExampleText",ExpressionUUID->"7a4f9025-54aa-4ce8-b89d-09655a69e3f9",
 CellID->1881708440],
Cell[CellGroupData[{
Cell[17260, 471, 304, 7, 29, "Input",ExpressionUUID->"4f1827a3-4f72-4da3-98f1-5f83c542c77a",
 CellID->632206651],
Cell[17567, 480, 280, 6, 37, "Output",ExpressionUUID->"70a90d36-26e9-4c1b-b0bf-c718f842f838",
 CellID->1309418731]
}, Open  ]],
Cell[CellGroupData[{
Cell[17884, 491, 281, 7, 29, "Input",ExpressionUUID->"b3343717-ffb8-4aa4-b16a-46666dd14ceb",
 CellID->569953902],
Cell[18168, 500, 5377, 110, 99, "Output",ExpressionUUID->"cb7f1296-d102-4aaa-a2df-15b1696277d0",
 CellID->1033627737]
}, Open  ]],
Cell[CellGroupData[{
Cell[23582, 615, 180, 3, 29, "Input",ExpressionUUID->"6787ab00-e88e-4c13-a57f-19ee5a20c3af",
 CellID->609527042],
Cell[23765, 620, 58169, 1043, 339, "Output",ExpressionUUID->"65d666d7-fe1c-492b-b7a7-0ffc6953140b",
 CellID->1540027169]
}, Open  ]]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "0"}, Closed]]]],
Cell[CellGroupData[{
Cell[82083, 1671, 1404, 36, 70, "ExampleSection",ExpressionUUID->"6de1e26c-623b-4e7f-9f16-b34e4b5cb7c8",
 CellID->1233549862],
Cell[83490, 1709, 448, 11, 70, "ExampleText",ExpressionUUID->"019ff9e0-6933-4b45-9191-06dbe568b556",
 CellID->1504242725],
Cell[CellGroupData[{
Cell[83963, 1724, 429, 11, 70, "Input",ExpressionUUID->"669f3e6a-7b7a-425e-9e29-f3a3185c6da2",
 CellID->1870854804],
Cell[84395, 1737, 1055, 29, 106, "Output",ExpressionUUID->"6072789b-68ba-4f8d-9fd2-f3344b63f536",
 CellID->292715916]
}, Open  ]],
Cell[85465, 1769, 133, 1, 70, "ExampleText",ExpressionUUID->"0a192bed-8a9d-459e-8169-84feaf04af42",
 CellID->2360343],
Cell[CellGroupData[{
Cell[85623, 1774, 427, 11, 70, "Input",ExpressionUUID->"08c176e6-996d-4e9c-b3a8-d93cc823cdae",
 CellID->187057416],
Cell[86053, 1787, 11563, 236, 70, "Output",ExpressionUUID->"46c21332-8abd-4ef9-968b-c626a088d650",
 CellID->892805826]
}, Open  ]],
Cell[97631, 2026, 136, 1, 70, "ExampleText",ExpressionUUID->"f2965458-0542-4766-abf8-58369d06d81e",
 CellID->518202502],
Cell[CellGroupData[{
Cell[97792, 2031, 538, 14, 70, "Input",ExpressionUUID->"32d98646-35d1-4229-8f4b-340f5e4bb0de",
 CellID->1364137182],
Cell[98333, 2047, 419, 11, 40, "Output",ExpressionUUID->"99d18bd3-004d-4227-9e84-0d4d5d715312",
 CellID->1325651071]
}, Open  ]]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "2"}, Closed]]]]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "PrimaryExamplesSection"}, Closed]]]],
Cell[98994, 2067, 2290, 62, 70, "SeeAlsoSection",ExpressionUUID->"762de68e-e4b2-488e-9335-64c7ea7a287c"],
Cell[101287, 2131, 763, 20, 70, "TutorialsSection",ExpressionUUID->"41aa7404-fc9f-424e-ad66-48754e707d23"],
Cell[102053, 2153, 736, 19, 70, "MoreAboutSection",ExpressionUUID->"660bc2a3-a37d-4337-abac-fc166942e636"],
Cell[102792, 2174, 1083, 31, 70, "RelatedLinksSection",ExpressionUUID->"6405ccd2-bf0a-4448-a91b-a00289c0eefe"],
Cell[103878, 2207, 78, 0, 70, "FooterCell",ExpressionUUID->"c69462cb-ae66-42f9-afd8-0b12fee9376b"]
}
]
*)

(* End of internal cache information *)

