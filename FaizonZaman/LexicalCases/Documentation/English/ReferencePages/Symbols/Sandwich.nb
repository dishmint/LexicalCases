(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     99687,       2120]
NotebookOptionsPosition[     91304,       1940]
NotebookOutlinePosition[     92069,       1966]
CellTagsIndexPosition[     91989,       1961]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "New in: ",
 Cell["XX", "HistoryData",
  CellTags->"New"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete"],
 " | Excised in: ",
 Cell[" ", "HistoryData",
  CellTags->"Excised"]
}], "History",
 CellID->860902038],

Cell[CellGroupData[{

Cell["Categorization", "CategorizationSection",
 CellID->1583222827],

Cell["Symbol", "Categorization",
 CellLabel->"Entity Type",
 CellID->1903667059],

Cell["FaizonZaman/LexicalCases", "Categorization",
 CellLabel->"Paclet Name",
 CellID->1976004446],

Cell["FaizonZaman`LexicalCases`", "Categorization",
 CellLabel->"Context",
 CellID->2019606714],

Cell["FaizonZaman/LexicalCases/ref/Sandwich", "Categorization",
 CellLabel->"URI",
 CellID->403517716]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->1607766713],

Cell["sandwich", "Keywords",
 CellChangeTimes->{{3.858013922278639*^9, 3.8580139252145233`*^9}},
 CellID->2095898837],

Cell["lexical sandwich", "Keywords",
 CellChangeTimes->{{3.858013922278639*^9, 3.8580139277361727`*^9}},
 CellID->933193412],

Cell["surround", "Keywords",
 CellChangeTimes->{{3.858013922278639*^9, 3.858013940164418*^9}},
 CellID->734784607],

Cell["lexical surroundings", "Keywords",
 CellChangeTimes->{{3.858013922278639*^9, 3.858013942797174*^9}},
 CellID->896549797],

Cell["lexical surround words", "Keywords",
 CellChangeTimes->{{3.858013922278639*^9, 3.858013955221857*^9}},
 CellID->1863861231],

Cell["", "Keywords",
 CellChangeTimes->{{3.858013922278639*^9, 3.858013954894445*^9}},
 CellID->621599172]
}, Open  ]],

Cell[CellGroupData[{

Cell["Syntax Templates", "TemplatesSection",
 CellID->597491718],

Cell[BoxData[""], "Template",
 CellLabel->"Additional Function Template",
 CellID->409771054],

Cell[BoxData[""], "Template",
 CellLabel->"Arguments Pattern",
 CellID->42048649],

Cell[BoxData[""], "Template",
 CellLabel->"Local Variables",
 CellID->189523880],

Cell[BoxData[""], "Template",
 CellLabel->"Color Equal Signs",
 CellID->609602659]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sandwich", "ObjectName",
 CellID->2094893623],

Cell[TextData[{
 Cell["   ", "ModInfo",ExpressionUUID->"e6b100d0-e4b5-4d62-9e97-5708db2fe647"],
 Cell[BoxData[
  RowBox[{
   ButtonBox["Sandwich",
    BaseStyle->"Link",
    ButtonData->"paclet:FaizonZaman/LexicalCases/ref/Sandwich"], "[", 
   RowBox[{
    StyleBox["outer", "TI"], ",", 
    StyleBox["inner", "TI"]}], "]"}]], "InlineFormula",ExpressionUUID->
  "141ad583-4d43-4ef1-b5a6-4c5ce3fd9f5d"],
 "\[LineSeparator]sandwiches lexical pattern ",
 Cell[BoxData[
  StyleBox["inner", "TI"]], "InlineFormula",ExpressionUUID->
  "9e1826fd-3331-4a88-a692-18237414b924"],
 " between two instances of lexical pattern ",
 Cell[BoxData[
  StyleBox["outer", "TI"]], "InlineFormula",ExpressionUUID->
  "e439591a-148c-475c-8200-f3f3a4833213"],
 "\n",
 Cell["   ", "ModInfo",ExpressionUUID->"0c908758-19b7-4511-8a71-98858c3a39a6"],
 Cell[BoxData[
  RowBox[{
   ButtonBox["Sandwich",
    BaseStyle->"Link",
    ButtonData->"paclet:FaizonZaman/LexicalCases/ref/Sandwich"], "[", 
   StyleBox["outer", "TI"], "]"}]], "InlineFormula",ExpressionUUID->
  "c8843a72-b62f-486f-8235-4f682b5ab960"],
 "\[LineSeparator]Represents an operator form that can be applied to an \
expression"
}], "Usage",
 CellChangeTimes->{{3.851646276792006*^9, 3.85164627699085*^9}, {
  3.852770678429731*^9, 3.852770697192687*^9}, {3.852770781025168*^9, 
  3.8527708172949333`*^9}, {3.864432445163266*^9, 3.8644324690860357`*^9}, {
  3.87986318640849*^9, 3.879863202201376*^9}},
 CellID->882729196,ExpressionUUID->"c402ace1-2174-42db-968f-4fb483386163"],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Sandwich",
   BaseStyle->"Link",
   ButtonData->"paclet:FaizonZaman/LexicalCases/ref/Sandwich"]], 
  "InlineFormula"],
 " returns a ",
 Cell[BoxData[
  ButtonBox["StringExpression",
   BaseStyle->"Link"]], "InlineFormula"],
 ", unlike other patterns in this package (",
 Cell[BoxData[
  ButtonBox["WordToken",
   BaseStyle->"Link",
   ButtonData->"paclet:FaizonZaman/LexicalCases/ref/WordToken"]], 
  "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["BoundToken",
   BaseStyle->"Link",
   ButtonData->"paclet:FaizonZaman/LexicalCases/ref/BoundToken"]], 
  "InlineFormula"],
 ", ",
 Cell[BoxData[
  ButtonBox["OptionalToken",
   BaseStyle->"Link",
   ButtonData->"paclet:FaizonZaman/LexicalCases/ref/OptionalToken"]], 
  "InlineFormula"],
 " etc. which are inert)"
}], "Notes",
 CellChangeTimes->{{3.852770842216228*^9, 3.852770904552207*^9}, {
  3.8543908513568296`*^9, 3.854390851855926*^9}},
 CellID->1756933914]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tutorials", "TutorialsSection",
 CellID->2085712289],

Cell[TextData[ButtonBox["LexicalCases Overview",
 BaseStyle->"Link",
 ButtonData->
  "paclet:FaizonZaman/LexicalCases/tutorial/LexicalCasesOverview"]], \
"Tutorials",
 CellChangeTimes->{{3.849883260102805*^9, 3.849883266135909*^9}},
 CellID->1439213037]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Demonstrations", "RelatedDemonstrationsSection",
 CellID->425374254],

Cell["XXXX", "RelatedDemonstrations",
 CellID->292026115]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Links", "RelatedLinksSection",
 CellID->1082781410],

Cell[TextData[ButtonBox["LexicalCases GitHub Repository",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://github.com/dishmint/LexicalCases"], None}]], "RelatedLinks",
 CellChangeTimes->{{3.8498832707912083`*^9, 3.84988329540683*^9}},
 CellID->614176243]
}, Open  ]],

Cell[CellGroupData[{

Cell["See Also", "SeeAlsoSection",
 CellID->1533171953],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["LexicalCases",
   BaseStyle->"Link",
   ButtonData->"paclet:FaizonZaman/LexicalCases/ref/LexicalCases"]], 
  "InlineFormula"],
 " \[EmptyVerySmallSquare] ",
 Cell[BoxData[
  ButtonBox["WordBoundary",
   BaseStyle->"Link"]], "InlineFormula"],
 " \[EmptyVerySmallSquare] ",
 Cell[BoxData[
  ButtonBox["StartOfString",
   BaseStyle->"Link"]], "InlineFormula"],
 " \[EmptyVerySmallSquare] ",
 Cell[BoxData[
  ButtonBox["EndOfString",
   BaseStyle->"Link"]], "InlineFormula"]
}], "SeeAlso",
 CellChangeTimes->{{3.864433850724662*^9, 3.864433921614181*^9}},
 CellID->364733718]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "MoreAboutSection",
 CellChangeTimes->{{3.843042374232973*^9, 3.843042375545676*^9}},
 CellID->1161269888],

Cell[TextData[ButtonBox["LexicalCases",
 BaseStyle->"Link",
 ButtonData->
  "paclet:FaizonZaman/LexicalCases/guide/LexicalCases"]], "MoreAbout",
 CellChangeTimes->{{3.8498833581177673`*^9, 3.849883377929474*^9}},
 CellID->1881621836]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     StyleBox["Examples", "PrimaryExamplesSection"], 
     ButtonBox[
      RowBox[{
       RowBox[{"More", " ", "Examples"}], " ", "\[RightTriangle]"}],
      BaseStyle->"ExtendedExamplesLink",
      ButtonData:>"ExtendedExamples"]}
   }],
  $Line = 0; Null]], "PrimaryExamplesSection",
 CellID->1084011928],

Cell[TextData[{
 Cell[BoxData[
  ButtonBox["Sandwich",
   BaseStyle->"Link",
   ButtonData->"paclet:FaizonZaman/LexicalCases/ref/Sandwich"]], 
  "InlineFormula"],
 " \"car\" with a ",
 Cell[BoxData[
  ButtonBox["WordToken",
   BaseStyle->"Link",
   ButtonData->"paclet:FaizonZaman/LexicalCases/ref/WordToken"]], 
  "InlineFormula"],
 " pattern"
}], "ExampleText",
 CellChangeTimes->{{3.852770932078795*^9, 3.852770943582952*^9}, {
  3.8527710509762383`*^9, 3.852771096087282*^9}, {3.8527711544630823`*^9, 
  3.852771161191893*^9}, {3.852771266802746*^9, 3.852771273345407*^9}},
 CellID->1881708440],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lexpatt", "=", 
  RowBox[{"Sandwich", "[", 
   RowBox[{
    RowBox[{"WordToken", "[", "1", "]"}], ",", " ", 
    RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.852771103300289*^9, 3.852771106375245*^9}},
 CellLabel->"In[60]:=",
 CellID->632206651,ExpressionUUID->"4f1827a3-4f72-4da3-98f1-5f83c542c77a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WordToken", "[", "1", "]"}], "~~", 
  RowBox[{"BoundToken", "[", "\<\"car\"\>", "]"}], "~~", 
  RowBox[{"WordToken", "[", "1", "]"}]}]], "Output",
 CellChangeTimes->{3.852771106935213*^9, 3.879863225592162*^9},
 CellLabel->"Out[60]=",
 CellID->1309418731,ExpressionUUID->"70a90d36-26e9-4c1b-b0bf-c718f842f838"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sndwchCases", "=", 
  RowBox[{"LexicalCases", "[", 
   RowBox[{
    RowBox[{"\"\<Content\>\"", "->", "\"\<cars\>\""}], ",", "lexpatt"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.852770945417832*^9, 3.852770982145187*^9}, {
  3.85277110077358*^9, 3.852771120352373*^9}},
 CellLabel->"In[61]:=",
 CellID->569953902,ExpressionUUID->"b3343717-ffb8-4aa4-b16a-46666dd14ceb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["LexicalSummary", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Source: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wikipedia\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Articles: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["35", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Matches: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["633", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Source: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wikipedia\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Articles: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["35", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Matches: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["633", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[
             FaizonZaman`LexicalCases`LexicalSummary, 1263440, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", FaizonZaman`LexicalCases`LexicalSummary, 1263440, 
            7886052071833066553608442275410639807813506456628220526096, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "LexicalSummary[<|Data -> {<|Article -> Car, Match -> A car or, Position \
-> {{1, 8}}|>, <|Article -> Car, Match -> American car manufactured, Position \
-> {{455, 479}}|>, <|Article -> Car, Match -> The car is, Position -> {{705, \
714}}|>, <<539>>, <|Article -> The Cars (album), <<2>>|>, <|Article -> Cars \
(video game), Match -> Missing[NoMatches], Position -> {}|>}, <<5>>|>]"& )],
  False,
  BoxID -> 7886052071833066553608442275410639807813506456628220526096,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.852770995975524*^9, 3.8527711295367403`*^9, 
  3.8798632457527514`*^9},
 CellLabel->"Out[61]=",
 CellID->1033627737,ExpressionUUID->"cb7f1296-d102-4aaa-a2df-15b1696277d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sndwchCases", "[", "\"\<CountGroups\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8527709997641077`*^9, 3.8527710045712633`*^9}, {
  3.852771133474962*^9, 3.852771134300408*^9}},
 CellLabel->"In[62]:=",
 CellID->609527042,ExpressionUUID->"6787ab00-e88e-4c13-a57f-19ee5a20c3af"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Matches" -> {"stock car racing"}, "CountGroup" -> 19|>, <|
       "Matches" -> {"the car is", "Stock car racing", "electric car to"}, 
        "CountGroup" -> 9|>, <|
       "Matches" -> {"The car was", "electric car in"}, "CountGroup" -> 8|>, <|
       "Matches" -> {"the car was", "the car and"}, "CountGroup" -> 7|>, <|
       "Matches" -> {
         "sports car was", "sports car racing", "police car used", 
          "luxury car is", "European car classification"}, "CountGroup" -> 
        6|>, <|"Matches" -> {"the car as", "of car manufacturers"}, 
        "CountGroup" -> 5|>, <|
       "Matches" -> {"the car to", "sports car market", "a car with"}, 
        "CountGroup" -> 4|>, <|
       "Matches" -> {
         "used car lot", "tuner car and", "The car is", "race car with", 
          "premium car larger", "new car sales", "luxury car brands", 
          "first car in", "electric car worldwide", "electric car for", 
          "a car that", "a car in", "a car and"}, "CountGroup" -> 3|>, <|
       "Matches" -> {
         "Touring car racing", "touring car racing", 
          "touring car championships", "touring car and", "the car when", 
          "the car that", "the car on", "the car design", 
          "the car characters", "the car at", "the car are", 
          "stock car series", "sports car since", "sports car races", 
          "sports car of", "sports car manufacturer", "sports car is", 
          "sports car called", "sports car based", "sports car and", 
          "racing car was", "race car who", "race car driver", 
          "police car to", "police car that", "police car is", 
          "other car manufacturers", "of car use", "of car buyers", 
          "luxury car sales", "luxury car manufacturers", "into car world", 
          "Indy car team", "family car or", "executive car or", 
          "electric car living", "electric car is", "electric car at", 
          "bumper car floor", "and car paint"}, "CountGroup" -> 2|>, <|
       "Matches" -> {
         "young car who", "word car is", "with car horns", "whole car could", 
          "wheeled car was", "wheel car is", "wealthy car owners", 
          "war car was", "Volvo car left", "V8 car in", "used car salesman", 
          "unmarked car is", "unmarked car and", "ultimate car of", 
          "tuner car who", "transitCable car may", "touring car lap", 
          "total car sales", "top car builder", "to car use", 
          "to car production", "through car share", "This car model", 
          "this car in", "This car has", "then car buyers", "their car to", 
          "their car models", "their car forms", "their car as", 
          "the car yet", "the car writes", "the car would", "the car with", 
          "the car were", "The car went", "the car weighed", 
          "the car visible", "the car upwards", "the car upon", 
          "the car through", "the car stable", "the car slowed", 
          "the car since", "The car returned", "the car raced", 
          "the car passed", "the car onto", "The car of", "the car models", 
          "the car missed", "the car market", "the car maker", 
          "the car looked", "the car instead", "The car industry", 
          "the car if", "the car have", "The car has", "The car had", 
          "the car had", "the car from", "the car feels", "the car evolved", 
          "the car equally", "the car doors", "the car crashes", 
          "the car competitive", "the car but", "the car brand", 
          "the car body", "The car became", "the car around", 
          "the car allowed", "that car use", "that car rental", 
          "Tesla car inspected", "surveillance car is", 
          "supertouring car were", "subcompact car market", 
          "Subcompact car is", "subcompact car is", "subcompact car for", 
          "styled car with", "stroke car engine", "Stock car races", 
          "stock car races", "stock car governing", "stock car formula", 
          "stock car drivers", "stock car divisions", 
          "stock car competitions", "stock car came", "stock car and", 
          "steel car bodies", "States car industry", "sprint car tyres", 
          "sports car world", "sports car with", "sports car which", 
          "sports car to", "sports car that", "Sports car racing", 
          "sports car production", "Sports car ownership", 
          "sports car models", "sports car manufacturers", 
          "sports car manufacture", "sports car driver", 
          "sports car designed", "sports car concept", "sports car company", 
          "sports car aimed", "Some car hacking", "smaller car was", 
          "smaller car in", "small car segment", "small car lineups", 
          "slower car getting", "size car or", "size car as", 
          "single car was", "significant car from", 
          "Several car classification", "seater car in", "seat car without", 
          "s car going", "s car for", "s car factories", "s car during", 
          "saloon car which", "saloon car available", "road car not", 
          "regarding car contact", "rear car tends", "rally car of", 
          "rally car during", "racing car that", "racing car in", 
          "racing car for", "racing car being", "race car the", 
          "race car series", "race car rules", "race car or", 
          "race car number", "race car Lightning", "race car Francesco", 
          "race car drivers", "race car developer", "race car described", 
          "race car built", "race car are", "race car and", 
          "race car aerodynamics", "production car world", 
          "production car top", "production car to", "production car race", 
          "production car in", "production car 0", "private car ownership", 
          "powered car in", "Pony car is", "pony car class", "police car was",
           "police car tasked", "police car plays", "police car partially", 
          "police car modified", "police car might", "police car lights", 
          "police car has", "police car exist", "police car and", 
          "physical car form", "permanent car manufacturing", 
          "performance car was", "pedestrian car casualties", 
          "patrol car used", "patrol car is", "patrol car allows", 
          "passenger car with", "passenger car or", "passenger car only", 
          "passenger car models", "passenger car model", 
          "passenger car market", "passenger car manufacturer", 
          "passenger car division", "passenger car classification", 
          "overall car industry", "Our car characters", 
          "other car propulsion", "other car manufacturer", "or car setup", 
          "or car in", "only car maker", "one car for", "One car driven", 
          "on car control", "oldest car racing", "of car was", "of car usage",
           "of car technology", "of car production", "of car may", 
          "of car it", "of car colors", "of car carriers", "of car body", 
          "no car can", "new car was", "new car to", "new car tax", 
          "new car market", "new car factory", "new car and", 
          "Neither car reached", "Muscle car is", 
          "multinational car manufacturer", "motor car in", 
          "modern car rallies", "model car vary", "MG car production", 
          "many car rental", "Malaysian car company", "luxury car trim", 
          "luxury car tax", "luxury car phenomenon", "luxury car marque", 
          "luxury car market", "luxury car in", "luxury car emerged", 
          "Luxury car companies", "luxury car buyers", "Lotus car models", 
          "Lotus car manufacturing", "Lotus car fan", "LMP2 car in", 
          "like car sharing", "last car which", "last car built", 
          "largest car company", "large car by", "lapped car of", 
          "kit car industry", "kit car era", "kei car with", "Jaguar car to", 
          "its car naming", "is car service", "intermediate car manufactures",
           "influenced car design", "Indy car project", "Indy car designed", 
          "individual car body", "independent car makers", "in car sales", 
          "imported car bodies", "ICE car fires", "hybrid car based", 
          "Hope car to", "Historic car models", "his car land", "his car in", 
          "his car broke", "GT car racing", "government car size", 
          "Gear car of", "fuel car can", "front car tends", "from car radios",
           "four car models", "for car safety", "first car that", 
          "first car model", "first car from", "family car is", 
          "family car in", "factory car including", "factory car in", 
          "executive car launched", "Executive car is", "executive car is", 
          "executive car introduced", "everyday car to", 
          "Emerging car technologies", "electric car would", 
          "electric car works", "electric car within", "electric car will", 
          "electric car stock", "electric car some", "electric car purchase", 
          "electric car market", "electric car manufacturer", 
          "electric car instead", "electric car has", "electric car fleet", 
          "electric car depends", "electric car can", "electric car and", 
          "each car moves", "each car makes", "each car had", "drive car to", 
          "drive car that", "dominant car and", "documented car fatalities", 
          "DMG car was", "diesel car when", "development car tested", 
          "developed car classification", "Derby car made", "decoy car is", 
          "cunning car salesman", "continued car production", 
          "connected car systems", "concept car with", "concept car was", 
          "concept car for", "concept car at", "competitive car in", 
          "competition car production", "compact car was", 
          "compact car platforms", "compact car or", "Compact car is", 
          "compact car is", "compact car in", "city car concept", 
          "city car category", "Chinese car Roewe", "Chinese car buyers", 
          "catch car thieves", "Cable car most", "by car resulting", 
          "by car enthusiasts", "business car and", "bumper car setup", 
          "bumper car riders", "built car designed", "British car production",
           "blue car who", "between car and", "better car of", 
          "best car achieving", "Benz car to", "as car racing", 
          "as car manufacturers", "any car model", "any car entered", 
          "animating car characters", "and car production", 
          "and car manufacturers", "and car had", "and car enthusiast", 
          "and car body", "American car with", "American car was", 
          "American car manufactured", "American car makers", 
          "American car company", "American car classification", 
          "all car classes", "a car which", "a car used", "a car tire", 
          "A car or", "a car on", "a car may", "a car manufacturer", 
          "A car is", "a car influences", "a car from", "a car especially", 
          "a car designed", "a car crash", "A car considered", 
          "a car classification", "a car cheaper", "a car called", 
          "a car built", "a car as", "36 car pack"}, "CountGroup" -> 1|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Matches"} -> 
        1, {All, "CountGroup"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Matches" -> TypeSystem`PackageScope`UnknownShape[False], 
            "CountGroup" -> TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 2, {All}]], 10, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Matches", "CountGroup"}, {
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength], 
         TypeSystem`Atom[Integer]}], 10], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Matches"} -> 
        1, {All, "CountGroup"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Matches" -> TypeSystem`PackageScope`UnknownShape[False], 
            "CountGroup" -> TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 2, {All}]], 10, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Matches", "CountGroup"}, {
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength], 
         TypeSystem`Atom[Integer]}], 10], "Path" -> {}, "DisplayedRowCount" -> 
     10, "DisplayedColumnCount" -> 2, "DataRowCount" -> 10, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Matches", 
                  Style[
                  "Matches", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Matches"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Matches"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CountGroup", 
                  Style[
                  "CountGroup", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "CountGroup"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "CountGroup"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"stock car racing"}, ShowStringCharacters -> False], 
                  
                  Style[
                   Style[{"stock car racing"}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car is", "Stock car racing", "electric car to"},
                    ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"the car is", "Stock car racing", 
                    "electric car to"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"The car was", "electric car in"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"The car was", "electric car in"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car was", "the car and"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"the car was", "the car and"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"sports car was", "sports car racing", 
                    "police car used", "luxury car is", 
                    "European car classification"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"sports car was", "sports car racing", 
                    "police car used", "luxury car is", 
                    "European car classification"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car as", "of car manufacturers"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"the car as", "of car manufacturers"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"the car to", "sports car market", "a car with"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"the car to", "sports car market", "a car with"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 13], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 13], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 40], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 40], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 386], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 386], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{10, 
                    Key["Matches"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Matches"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["CountGroup"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{619., {155.3544921875, 160.6455078125}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{619., {155.3544921875, 160.6455078125}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.852771005046975*^9, 3.852771136861804*^9, 
  3.87986325037959*^9},
 CellLabel->"Out[62]=",
 CellID->1540027169,ExpressionUUID->"65d666d7-fe1c-492b-b7a7-0ffc6953140b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["More Examples", "ExtendedExamplesSection",
 CellTags->"ExtendedExamples",
 CellID->1884696395],

Cell[BoxData[
 InterpretationBox[Cell["Scope", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->708517515],

Cell[BoxData[
 InterpretationBox[Cell["Generalizations & Extensions", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->257051990],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["Options", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1683181813],

Cell[BoxData[
 InterpretationBox[Cell["XXXX", "ExampleSubsection"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->434649160],

Cell[BoxData[
 InterpretationBox[Cell["XXXX", "ExampleSubsection"],
  $Line = 0; Null]], "ExampleSubsection",
 CellID->1556548673]
}, Open  ]],

Cell[BoxData[
 InterpretationBox[Cell["Applications", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->267759357],

Cell[BoxData[
 InterpretationBox[Cell["Properties & Relations", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1253272634],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell["Possible Issues", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->1233549862],

Cell[TextData[{
 "Naming the 'outer' pattern will not work since it will produce the same \
name for the left flanking pattern and right flanking pattern. Note the \
duplicate ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"w", ":"}], "Input"]], "InlineFormula",
  FormatType->StandardForm,ExpressionUUID->
  "4da8548b-9f73-49f2-ae77-18318a015d46"],
 "."
}], "ExampleText",
 CellChangeTimes->{
  3.854391084429017*^9, {3.8798632685281754`*^9, 3.879863272266321*^9}, {
   3.879878653218855*^9, 3.8798786921222887`*^9}},
 CellID->1504242725,ExpressionUUID->"019ff9e0-6933-4b45-9191-06dbe568b556"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpandPattern", "[", 
  RowBox[{"\"\<a nice car is good.\>\"", ",", 
   RowBox[{
    RowBox[{"Sandwich", "[", 
     RowBox[{
      RowBox[{"w", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}], ",", " ", 
      RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}]}], "]"}], ":>", "w"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.879878681107833*^9, 3.879878682943879*^9}},
 CellLabel->"In[4]:=",
 CellID->1870854804,ExpressionUUID->"669f3e6a-7b7a-425e-9e29-f3a3185c6da2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"w", ":", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "StartOfString", "|", 
       "StartOfLine"}], "~~", 
      RowBox[{"WordCharacter", ".."}], "~~", 
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "EndOfString", "|", 
       "EndOfLine"}]}], ")"}]}], "~~", 
   RowBox[{
   "WordBoundary", "|", "\<\" \"\>", "|", "StartOfString", "|", 
    "StartOfLine"}], "~~", "\<\"car\"\>", "~~", 
   RowBox[{
   "WordBoundary", "|", "\<\" \"\>", "|", "EndOfString", "|", "EndOfLine"}], "~~", 
   RowBox[{"w", ":", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "StartOfString", "|", 
       "StartOfLine"}], "~~", 
      RowBox[{"WordCharacter", ".."}], "~~", 
      RowBox[{
      "WordBoundary", "|", "\<\" \"\>", "|", "EndOfString", "|", 
       "EndOfLine"}]}], ")"}]}]}], "\[RuleDelayed]", "w"}]], "Output",
 CellChangeTimes->{3.8798786847395067`*^9},
 CellLabel->"Out[4]=",
 CellID->292715916,ExpressionUUID->"6072789b-68ba-4f8d-9fd2-f3344b63f536"]
}, Open  ]],

Cell["LexicalCases fails with this pattern:", "ExampleText",
 CellChangeTimes->{{3.8798786987459097`*^9, 3.8798787102263327`*^9}, {
  3.879878807002902*^9, 3.879878825465344*^9}},
 CellID->2360343,ExpressionUUID->"0a192bed-8a9d-459e-8169-84feaf04af42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LexicalCases", "[", 
  RowBox[{"\"\<a nice car is good.\>\"", ",", 
   RowBox[{
    RowBox[{"Sandwich", "[", 
     RowBox[{
      RowBox[{"w", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}], ",", " ", 
      RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}]}], "]"}], ":>", "w"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.8543909662184963`*^9, 3.854391012300275*^9}, {
  3.879863324017447*^9, 3.879863352262238*^9}},
 CellLabel->"In[3]:=",
 CellID->187057416,ExpressionUUID->"08c176e6-996d-4e9c-b3a8-d93cc823cdae"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10., {0., 10.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"\\!\\(\\*TagBox[RowBox[{\\\"StringCases\\\", \\\"[\\\", \
RowBox[{\\\"FaizonZaman`LexicalCases`Private`s$14921\\\", \\\",\\\", \
\\\"FaizonZaman`LexicalCases`Private`rx$14921\\\", \\\",\\\", \
RowBox[{\\\"IgnoreCase\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \
\\\"[\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"IgnoreCase\\\"}], \\\"]\\\"}]}], \\\",\\\", \
RowBox[{\\\"Overlaps\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \\\"[\
\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"Overlaps\\\"}], \\\"]\\\"}]}]}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) produced a message on evaluation.\"", 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ConfirmationFailed\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10., {0., 10.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
             "\"\[WarningSign]\"", "Message", StripOnInput -> False, FontSize -> 
              35], ContentPadding -> False, FrameMargins -> {{0, 0}, {0, 0}}, 
             FrameStyle -> None, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"\\!\\(\\*TagBox[RowBox[{\\\"StringCases\\\", \\\"[\\\", \
RowBox[{\\\"FaizonZaman`LexicalCases`Private`s$14921\\\", \\\",\\\", \
\\\"FaizonZaman`LexicalCases`Private`rx$14921\\\", \\\",\\\", \
RowBox[{\\\"IgnoreCase\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \
\\\"[\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"IgnoreCase\\\"}], \\\"]\\\"}]}], \\\",\\\", \
RowBox[{\\\"Overlaps\\\", \\\"\[Rule]\\\", RowBox[{\\\"OptionValue\\\", \\\"[\
\\\", RowBox[{\\\"LexicalCases\\\", \\\",\\\", RowBox[{\\\"{\\\", \
\\\"}\\\"}], \\\",\\\", \\\"Overlaps\\\"}], \\\"]\\\"}]}]}], \\\"]\\\"}], \
Function[Short[Slot[1], 5]]]\\) produced a message on evaluation.\"", 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"ConfirmationFailed\"", "SummaryItem"]}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"ConfirmationType\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"ConfirmQuiet\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"HeldExpression\"", "\": \""}, "RowDefault"],
                   "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"Hold", "[", 
                    RowBox[{"StringCases", "[", 
                    
                    RowBox[{
                    "FaizonZaman`LexicalCases`Private`s$14921", ",", 
                    "FaizonZaman`LexicalCases`Private`rx$14921", ",", 
                    RowBox[{"IgnoreCase", "\[Rule]", 
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"LexicalCases", ",", 
                    RowBox[{"{", "}"}], ",", "IgnoreCase"}], "]"}]}], ",", 
                    RowBox[{"Overlaps", "\[Rule]", 
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"LexicalCases", ",", 
                    RowBox[{"{", "}"}], ",", "Overlaps"}], "]"}]}]}], "]"}], 
                    "]"}], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"HeldMessageName\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"Hold", "[", 
                    StyleBox[
                    RowBox[{"StringExpression", "::", "cond"}], 
                    "MessageName"], "]"}], HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"HeldMessageCall\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"Hold", "[", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"StringExpression", "::", "cond"}], 
                    "MessageName"], ",", "w", ",", 
                    RowBox[{"w", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{"WordBoundary", "|", "\" \"", "|", 
                    "StartOfString", "|", "StartOfLine"}], "~~", 
                    RowBox[{"WordCharacter", ".."}], "~~", 
                    
                    RowBox[{"WordBoundary", "|", "\" \"", "|", "EndOfString", 
                    "|", "EndOfLine"}]}], ")"}]}]}], "]"}], "]"}], HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Information\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                  "\"Message issued while calling StringCases\"", HoldForm], 
                  "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "ConfirmationFailed", <|
   "MessageTemplate" -> "`` produced a message on evaluation.", 
    "MessageParameters" -> {
      HoldForm[
       StringCases[
       FaizonZaman`LexicalCases`Private`s$14921, 
        FaizonZaman`LexicalCases`Private`rx$14921, IgnoreCase -> 
        OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, IgnoreCase], 
        Overlaps -> 
        OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, Overlaps]]]}, 
    "ConfirmationType" -> "ConfirmQuiet", "HeldExpression" -> Hold[
      StringCases[
      FaizonZaman`LexicalCases`Private`s$14921, 
       FaizonZaman`LexicalCases`Private`rx$14921, IgnoreCase -> 
       OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, IgnoreCase], 
       Overlaps -> 
       OptionValue[FaizonZaman`LexicalCases`LexicalCases, {}, Overlaps]]], 
    "HeldMessageName" -> Hold[
      MessageName[StringExpression, "cond"]], "HeldMessageCall" -> Hold[
      Message[
       MessageName[StringExpression, "cond"], $CellContext`w, 
       Pattern[$CellContext`w, 
        StringExpression[
         Alternatives[WordBoundary, " ", StartOfString, StartOfLine], 
         Repeated[WordCharacter], 
         Alternatives[WordBoundary, " ", EndOfString, EndOfLine]]]]], 
    "Information" -> "Message issued while calling StringCases"|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.854390968806285*^9, 3.854391013272668*^9, {3.8798633281557283`*^9, 
   3.8798633541715727`*^9}, 3.879878169226201*^9, 3.879878401628028*^9, 
   3.879878611789253*^9, 3.879879766862885*^9},
 CellLabel->"Out[3]=",
 CellID->892805826,ExpressionUUID->"46c21332-8abd-4ef9-968b-c626a088d650"]
}, Open  ]],

Cell["For now, explicitly name each pattern.", "ExampleText",
 CellChangeTimes->{{3.85801404322857*^9, 3.8580140715490103`*^9}},
 CellID->518202502],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LexicalCases", "[", 
   RowBox[{"\"\<a nice car is good.\>\"", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"w1", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}], "~~", 
      RowBox[{"BoundToken", "[", "\"\<car\>\"", "]"}], "~~", 
      RowBox[{"w2", ":", 
       RowBox[{"WordToken", "[", "1", "]"}]}]}], ":>", 
     RowBox[{"w1", "<>", "w2"}]}]}], "]"}], "[", "\"\<Data\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.858014075132609*^9, 3.8580141492506742`*^9}, {
  3.8580141804820747`*^9, 3.858014225014339*^9}},
 CellLabel->"In[66]:=",
 CellID->1364137182,ExpressionUUID->"32d98646-35d1-4229-8f4b-340f5e4bb0de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Match\"\>", "\[Rule]", "\<\"nice is\"\>"}], ",", 
    RowBox[{"\<\"Position\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"3", ",", "13"}], "}"}], "}"}]}]}], "\[RightAssociation]"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.858014118488275*^9, 3.858014149758926*^9}, {
   3.858014184008812*^9, 3.858014225742875*^9}, 3.879863366304955*^9},
 CellLabel->"Out[66]=",
 CellID->1325651071,ExpressionUUID->"99d18bd3-004d-4227-9e84-0d4d5d715312"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 InterpretationBox[Cell["Interactive Examples", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->465402496],

Cell[BoxData[
 InterpretationBox[Cell["Neat Examples", "ExampleSection"],
  $Line = 0; Null]], "ExampleSection",
 CellID->884307898]
}, Open  ]]
},
WindowSize->{941, 847},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
TaggingRules-><|"Paclet" -> "None"|>,
CellContext->"Global`",
FrontEndVersion->"13.1 for Mac OS X ARM (64-bit) (June 16, 2022)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "FunctionPageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"236ecc2a-79c1-48de-9e18-dc4540f98176"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ExtendedExamples"->{
  Cell[73507, 1509, 100, 2, 58, "ExtendedExamplesSection",ExpressionUUID->"a7cfd794-b45f-4950-a034-7b9c9ef9b09a",
   CellTags->"ExtendedExamples",
   CellID->1884696395]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ExtendedExamples", 91794, 1954}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 323, 14, 26, "History",ExpressionUUID->"51a2987b-f5c6-4788-ba24-dd2c917acbd9",
 CellID->860902038],
Cell[CellGroupData[{
Cell[906, 38, 68, 1, 21, "CategorizationSection",ExpressionUUID->"467a15c3-f363-475e-b9d1-9492909269ad",
 CellID->1583222827],
Cell[977, 41, 80, 2, 70, "Categorization",ExpressionUUID->"1701f9b9-07d2-4d37-bf67-674ec373179f",
 CellID->1903667059],
Cell[1060, 45, 98, 2, 70, "Categorization",ExpressionUUID->"b7a821ee-1036-4b27-b99f-fcc5e22810e3",
 CellID->1976004446],
Cell[1161, 49, 95, 2, 70, "Categorization",ExpressionUUID->"78c474c7-a96c-468c-ae61-233b66c40ce5",
 CellID->2019606714],
Cell[1259, 53, 102, 2, 70, "Categorization",ExpressionUUID->"e6ff0a20-0a76-449b-81df-2a6f1c66991c",
 CellID->403517716]
}, Closed]],
Cell[CellGroupData[{
Cell[1398, 60, 56, 1, 21, "KeywordsSection",ExpressionUUID->"bb3fa1ca-1e09-4321-8bc5-05707488029c",
 CellID->1607766713],
Cell[1457, 63, 117, 2, 21, "Keywords",ExpressionUUID->"29ed98f6-e9e0-48a3-91d1-4d197a7f3f9c",
 CellID->2095898837],
Cell[1577, 67, 124, 2, 21, "Keywords",ExpressionUUID->"2d85dd45-b562-4f61-9e3f-997ab0a58dcf",
 CellID->933193412],
Cell[1704, 71, 114, 2, 21, "Keywords",ExpressionUUID->"74cad980-faef-464f-980a-af9c52d6c982",
 CellID->734784607],
Cell[1821, 75, 126, 2, 21, "Keywords",ExpressionUUID->"058ec70e-8f40-46cd-9e2b-38a000232d0f",
 CellID->896549797],
Cell[1950, 79, 129, 2, 21, "Keywords",ExpressionUUID->"898e7e3b-6e44-454c-a47f-e28b61f494a8",
 CellID->1863861231],
Cell[2082, 83, 106, 2, 21, "Keywords",ExpressionUUID->"d44674ab-b4ae-49ca-8b85-20d6cbe145fb",
 CellID->621599172]
}, Open  ]],
Cell[CellGroupData[{
Cell[2225, 90, 64, 1, 31, "TemplatesSection",ExpressionUUID->"ffd96d75-795b-49cc-bc7f-6a1d78b33864",
 CellID->597491718],
Cell[2292, 93, 93, 2, 30, "Template",ExpressionUUID->"7d1a51c2-44d2-494e-9971-17aab906b379",
 CellID->409771054],
Cell[2388, 97, 81, 2, 30, "Template",ExpressionUUID->"65086ab3-375e-423c-a4b0-75de5dbbf5a5",
 CellID->42048649],
Cell[2472, 101, 80, 2, 30, "Template",ExpressionUUID->"1fff52fa-4f69-4686-9305-1c8d544e360d",
 CellID->189523880],
Cell[2555, 105, 82, 2, 30, "Template",ExpressionUUID->"fe71bc04-f347-464a-99a2-88dc3fa34a7a",
 CellID->609602659]
}, Open  ]],
Cell[CellGroupData[{
Cell[2674, 112, 51, 1, 74, "ObjectName",ExpressionUUID->"8d75bf5c-48e2-4ac9-b25f-6d39ea685679",
 CellID->2094893623],
Cell[2728, 115, 1514, 35, 125, "Usage",ExpressionUUID->"c402ace1-2174-42db-968f-4fb483386163",
 CellID->882729196],
Cell[4245, 152, 961, 32, 47, "Notes",ExpressionUUID->"26bcfff6-67e6-4284-966c-dfbfe94b39bf",
 CellID->1756933914]
}, Open  ]],
Cell[CellGroupData[{
Cell[5243, 189, 58, 1, 47, "TutorialsSection",ExpressionUUID->"ec7a4065-090e-425f-848d-80c83f33cc48",
 CellID->2085712289],
Cell[5304, 192, 253, 6, 19, "Tutorials",ExpressionUUID->"786b2c20-2b81-415e-9954-ceec98054591",
 CellID->1439213037]
}, Open  ]],
Cell[CellGroupData[{
Cell[5594, 203, 82, 1, 34, "RelatedDemonstrationsSection",ExpressionUUID->"ea6e2578-7520-4dcc-8f53-6236019a36c3",
 CellID->425374254],
Cell[5679, 206, 57, 1, 19, "RelatedDemonstrations",ExpressionUUID->"d9822080-7ad6-4def-8990-b8842d24191d",
 CellID->292026115]
}, Open  ]],
Cell[CellGroupData[{
Cell[5773, 212, 65, 1, 34, "RelatedLinksSection",ExpressionUUID->"72cbc6f1-fe9d-4014-80a6-e8342bec29cc",
 CellID->1082781410],
Cell[5841, 215, 261, 5, 19, "RelatedLinks",ExpressionUUID->"c197d4da-5f5a-4def-99c0-07ea31fae55a",
 CellID->614176243]
}, Open  ]],
Cell[CellGroupData[{
Cell[6139, 225, 55, 1, 34, "SeeAlsoSection",ExpressionUUID->"8f99cc06-d9dd-418e-8176-531ef75dbd71",
 CellID->1533171953],
Cell[6197, 228, 615, 20, 22, "SeeAlso",ExpressionUUID->"169a4b0f-da7e-443e-8345-126b6329630f",
 CellID->364733718]
}, Open  ]],
Cell[CellGroupData[{
Cell[6849, 253, 129, 2, 34, "MoreAboutSection",ExpressionUUID->"2a3b4953-8c73-49f8-a406-25152053b77e",
 CellID->1161269888],
Cell[6981, 257, 233, 5, 19, "MoreAbout",ExpressionUUID->"2d87d7a2-fdfe-4bee-b261-d568cdc09cd0",
 CellID->1881621836]
}, Open  ]],
Cell[CellGroupData[{
Cell[7251, 267, 357, 11, 73, "PrimaryExamplesSection",ExpressionUUID->"7e4375cd-8404-49c2-978c-b76a59bdb197",
 CellID->1084011928],
Cell[7611, 280, 598, 17, 26, "ExampleText",ExpressionUUID->"6c6af0fe-e311-447e-ac77-bef15fe9687f",
 CellID->1881708440],
Cell[CellGroupData[{
Cell[8234, 301, 371, 8, 27, "Input",ExpressionUUID->"4f1827a3-4f72-4da3-98f1-5f83c542c77a",
 CellID->632206651],
Cell[8608, 311, 345, 7, 26, "Output",ExpressionUUID->"70a90d36-26e9-4c1b-b0bf-c718f842f838",
 CellID->1309418731]
}, Open  ]],
Cell[CellGroupData[{
Cell[8990, 323, 396, 9, 27, "Input",ExpressionUUID->"b3343717-ffb8-4aa4-b16a-46666dd14ceb",
 CellID->569953902],
Cell[9389, 334, 5471, 112, 88, "Output",ExpressionUUID->"cb7f1296-d102-4aaa-a2df-15b1696277d0",
 CellID->1033627737]
}, Open  ]],
Cell[CellGroupData[{
Cell[14897, 451, 300, 5, 27, "Input",ExpressionUUID->"6787ab00-e88e-4c13-a57f-19ee5a20c3af",
 CellID->609527042],
Cell[15200, 458, 58258, 1045, 328, "Output",ExpressionUUID->"65d666d7-fe1c-492b-b7a7-0ffc6953140b",
 CellID->1540027169]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73507, 1509, 100, 2, 58, "ExtendedExamplesSection",ExpressionUUID->"a7cfd794-b45f-4950-a034-7b9c9ef9b09a",
 CellTags->"ExtendedExamples",
 CellID->1884696395],
Cell[73610, 1513, 124, 3, 35, "ExampleSection",ExpressionUUID->"093f7740-90dc-4422-86df-973a6ba9fbe2",
 CellID->708517515],
Cell[73737, 1518, 147, 3, 23, "ExampleSection",ExpressionUUID->"5416b5b9-9f35-496f-a637-752056c865f8",
 CellID->257051990],
Cell[CellGroupData[{
Cell[73909, 1525, 127, 3, 23, "ExampleSection",ExpressionUUID->"45715e9e-a25d-4a51-a04b-e21d8a02872e",
 CellID->1683181813],
Cell[74039, 1530, 129, 3, 26, "ExampleSubsection",ExpressionUUID->"c6f614d1-6889-4b56-b9c6-ec5778079861",
 CellID->434649160],
Cell[74171, 1535, 130, 3, 22, "ExampleSubsection",ExpressionUUID->"4760e746-6730-42c2-bae5-6f1aea51429a",
 CellID->1556548673]
}, Open  ]],
Cell[74316, 1541, 131, 3, 35, "ExampleSection",ExpressionUUID->"d3c20d30-751a-4cd4-a8a4-dd2da9347551",
 CellID->267759357],
Cell[74450, 1546, 142, 3, 23, "ExampleSection",ExpressionUUID->"8e71ccc7-1d72-423f-9bc0-1a78f855cc9c",
 CellID->1253272634],
Cell[CellGroupData[{
Cell[74617, 1553, 135, 3, 23, "ExampleSection",ExpressionUUID->"0f77c9a2-75f7-48e9-91fb-8fe0436648f9",
 CellID->1233549862],
Cell[74755, 1558, 588, 14, 41, "ExampleText",ExpressionUUID->"019ff9e0-6933-4b45-9191-06dbe568b556",
 CellID->1504242725],
Cell[CellGroupData[{
Cell[75368, 1576, 495, 12, 47, "Input",ExpressionUUID->"669f3e6a-7b7a-425e-9e29-f3a3185c6da2",
 CellID->1870854804],
Cell[75866, 1590, 1099, 30, 127, "Output",ExpressionUUID->"6072789b-68ba-4f8d-9fd2-f3344b63f536",
 CellID->292715916]
}, Open  ]],
Cell[76980, 1623, 252, 3, 24, "ExampleText",ExpressionUUID->"0a192bed-8a9d-459e-8169-84feaf04af42",
 CellID->2360343],
Cell[CellGroupData[{
Cell[77257, 1630, 544, 13, 47, "Input",ExpressionUUID->"08c176e6-996d-4e9c-b3a8-d93cc823cdae",
 CellID->187057416],
Cell[77804, 1645, 11776, 240, 57, "Output",ExpressionUUID->"46c21332-8abd-4ef9-968b-c626a088d650",
 CellID->892805826]
}, Open  ]],
Cell[89595, 1888, 148, 2, 24, "ExampleText",ExpressionUUID->"5ca13c6f-aa49-4322-b6a1-3b633e56d4ad",
 CellID->518202502],
Cell[CellGroupData[{
Cell[89768, 1894, 658, 16, 66, "Input",ExpressionUUID->"32d98646-35d1-4229-8f4b-340f5e4bb0de",
 CellID->1364137182],
Cell[90429, 1912, 558, 13, 29, "Output",ExpressionUUID->"99d18bd3-004d-4227-9e84-0d4d5d715312",
 CellID->1325651071]
}, Open  ]]
}, Open  ]],
Cell[91014, 1929, 139, 3, 35, "ExampleSection",ExpressionUUID->"7d01e129-27ad-40a9-b9f9-b4de6e2759a7",
 CellID->465402496],
Cell[91156, 1934, 132, 3, 23, "ExampleSection",ExpressionUUID->"1fb89031-11f1-4de3-b513-055d56a08f83",
 CellID->884307898]
}, Open  ]]
}
]
*)

